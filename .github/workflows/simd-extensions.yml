name: Build and Test SIMD Instructions on different CPU architectures

on:
  push:
    branches:
      - master
      - "*simd*"

  workflow_dispatch:

env:
  WORK_DIR: ${{github.workspace}}/JUCE_modules/chowdsp_utils

jobs:
  build:
    name: "Build ${{ matrix.tests }} for SIMD extensions test"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        tests: ["chowdsp_math_test"]
        os: [ubuntu-latest]

    steps:
      - name: Install Linux Deps
        run: |
          sudo apt-get update
          sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libsamplerate-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

      - name: Install lcov (Linux)
        run: sudo apt install lcov

      - name: Install Intel SDE
        uses: petarpetrovt/setup-sde@v2

      - name: Check SDE
        run: |
          $SDE_PATH/sde64 --version
          $SDE_PATH/sde64 --help

#      - name: Get latest CMake
#        uses: lukka/get-cmake@latest
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          path: ${{env.WORK_DIR}}
#
#      - name: Set up environment
#        working-directory: ${{github.workspace}}
#        run: |
#          git clone --depth 1 --branch 7.0.1 https://github.com/juce-framework/JUCE.git
#          cd JUCE_modules
#          git clone --single-branch --branch chowdsp https://github.com/Chowdhury-DSP/foleys_gui_magic.git
#          git clone --single-branch --branch main --recursive https://github.com/free-audio/clap-juce-extensions.git
#
#      - name: Configure
#        working-directory: ${{env.WORK_DIR}}
#        shell: bash
#        run: cmake -Bbuild -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCHOWDSP_ENABLE_TESTING=ON
#
#      - name: Build
#        working-directory: ${{env.WORK_DIR}}/build
#        shell: bash
#        env:
#          TEST_TARGETS: ${{ matrix.tests }}
#        run: cmake --build . --config Release --parallel 4 --target $TEST_TARGETS
#
#      - name: "Run Tests: ${{ matrix.tests }} on Sandy Bridge architecture"
#        working-directory: ${{env.WORK_DIR}}/build/test-binary
#        shell: bash
#        run: |
#          for exe in *; do
#            echo "RUNNING TEST: $exe"
#            ./$exe;
#          done
#
#      - name: "Run Tests: ${{ matrix.tests }} on P6 architecture"
#        working-directory: ${{env.WORK_DIR}}/build/test-binary
#        shell: bash
#        run: |
#          for exe in *; do
#            echo "RUNNING TEST: $exe"
#            ./$exe;
#          done
#
#      - name: Collect Coverage Data
#        working-directory: ${{env.WORK_DIR}}
#        shell: bash
#        run: |
#          lcov --directory . --capture --output-file coverage.info
#          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' '/Applications/Xcode*' '*JUCE/modules*' '*foleys_*' '*chowdsp_utils/tests*' '*third_party*' '*chowdsp_foleys*' '*chowdsp_core/JUCEHelpers*' --output-file coverage.info
#
#      - name: Report Coverage Data
#        working-directory: ${{env.WORK_DIR}}
#        shell: bash
#        run: lcov --list coverage.info
#
#      - name: Upload Coverage Data
#        working-directory: ${{env.WORK_DIR}}
#        shell: bash
#        run: bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
